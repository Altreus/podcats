Haskell From Scratch - 2. Starting Somewhere

I said that I need to figure out where to start and I was a bit annoyed by
the piecemeal fashion in which the tutorial I was reading was presenting it
to me. However, it was a good primer. Having read the first page or two I at
least have some idea of the important syntax points in Haskell, which is
useful coming from a Perl background because I know what's different. I used
[Learn You A Haskell](http://learnyouahaskell.com/). I'll assume you, the
reader of this, will have read a page or two of that, but I don't think it's
that necessary because you should be able to keep up as we go along.

--CUT--

#### OK, Go ####

Alright, so the first thing I need to do to make this game is to make
graphics happen. Any software engineer with a modicum of experience will be
going no! Because I should surely get the game itself working first? I can
always use stdout and ASCII representations of the data to make the game,
and separating my interests should be built in from the start. I should
concentrate on making the game engine, having the functionality I need, and
build in the cosmetics of actually displaying it later on.

Well maybe. But I like to be able to see my progress working towards a goal.
If I can get some graphics up in the first place, then I have an easy way
of displaying the game so far in some prototypical, unpolished version of
what it will finally look like. Besides which, I have already done a fair
amount of the work in the C++ version, so I can lift some of that into
Haskell as I learn more about it.

Plus, we're here to learn Haskell. I can't simply dive right into it from
here because I don't know enough to build a sensible code structure. Building
a working core of functionality is the *object-oriented* way of doing it. Even
though it makes common-sense sense to do so, actually doing so may not be the
ideal way of putting this together in Haskell. I don't know enough to make that
decision yet, so I'm going to do it the wrong way from an OO point of view and
see what happens. 

So, I'm going to get a library that will do something visible, and learn from 
the example scripts. Then there will be instant gratification, and hopefully 
some learning.

#### A Graphics Library ####

We are going to start out with a graphics library called 
[Gloss](http://hackage.haskell.org/package/gloss). It is easily installed using
the handy cabal program that we (should have) installed in 
[part 1](http://podcats.in/training/2010-03-20-haskell-1.html?seemore=y)

[shell]$ cabal install gloss[/shell]

You might be required to install various C libraries. Most of these are easily
solvable by name, but there is one that isn't. If you get this message

[shell]* Missing C library: GL[/shell]

Then the package you want is something like `freeglut3-dev`. This is the 
Debian package, but other systems should have something similar. Thanks to
[SubStack](http://substack.net) for that pointer (and the rest!).

#### Learning by Example ####

The reason I chose Gloss is it has several examples, from which we can learn.
Hopefully they will have enough between them to give us a good idea of how to
proceed. It seems likely that we will first adapt the examples to give us the
results we want before we get to the stage where we can start from scratch
ourselves. These examples are available from cabal as well:

[shell]$ cabal install gloss-examples[/shell]

The reason I installed them this way is the site where they can be found is
down at the time of writing. If you prefer, you can find them online
**TODO: find out where.**

The cabal installer fetches and compiles the Haskell source and puts binaries
in a directory in your home directory. Since for the purposes of this we need
the sources, we might as well go in there and get the sources again.

[shell]$ cd $HOME/.cabal/packages/gloss-examples/1.0.0.1
$ cp gloss-examples-1.0.0.1.tar.gz $HOME/haskell-examples-directory
$ cd !$
$ tar xvzf gloss-examples-1.0.0.1.tar.gz[/shell]

Now your working directory (the intelligent reader has automatically replaced
the haskell-examples-directory above with his or her own preferred directory)
contains the source for the gloss examples. We are going to deal with the
simple Hello example.

#### File Naming ####

It is a mere convention that the file is named Main.hs; it is not necessary,
but it clues the user (and any software that may automate the task) that the
main function can be found here.

As with all our favourite compiled languages, Haskell needs an entry point.
Since Haskell is function-oriented, the entry point is specified by creating
the `main` function. We know from our introductory lessons that the way we
create a function is with the `=` operator. So if we open up Hello/Main.hs we
can expect to find something like `main = something` in there somewhere.

Let's see what we do find.
